/****************************************************************************
** Meta object code from reading C++ file 'tst_everything.cpp'
**
** Created by: The Qt Meta Object Compiler version 68 (Qt 6.7.0)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qmetatype.h>

#include <QtCore/qtmochelpers.h>

#include <memory>


#include <QtCore/qxptype_traits.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'tst_everything.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 68
#error "This file was generated using the moc from 6.7.0. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

#ifndef Q_CONSTINIT
#define Q_CONSTINIT
#endif

QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
QT_WARNING_DISABLE_GCC("-Wuseless-cast")
namespace {

#ifdef QT_MOC_HAS_STRINGDATA
struct qt_meta_stringdata_CLASSeverythingENDCLASS_t {};
constexpr auto qt_meta_stringdata_CLASSeverythingENDCLASS = QtMocHelpers::stringData(
    "everything",
    "initTestCase",
    "",
    "cleanupTestCase",
    "test_case1",
    "testIsHuman",
    "testGetPlayerNumber",
    "testBoardInitialization",
    "testBoardClicking",
    "testSetAllowed",
    "testGameChangeNextPlayer1",
    "testGameChangeNextPlayer2",
    "testGameChangePlayers",
    "testGameRestart",
    "testGameNextRound",
    "testGameLogicGenerateValidMoves",
    "testGameLogicNumOfValidMoves",
    "testGameLogicValidMove",
    "testGameLogicGameOver",
    "testGameLogicGameWon",
    "testGameStateMakeMove",
    "testGameStateChangePlayer",
    "testGameStateInitiate",
    "testGameStatePrintBoard",
    "testHumanPlayerIsHuman",
    "testHumanPlayerGetPlayerNumber",
    "testLoginFunctionality",
    "testStartupFunctionality",
    "testWidgetFunctionality"
);
#else  // !QT_MOC_HAS_STRINGDATA
#error "qtmochelpers.h not found or too old."
#endif // !QT_MOC_HAS_STRINGDATA
} // unnamed namespace

Q_CONSTINIT static const uint qt_meta_data_CLASSeverythingENDCLASS[] = {

 // content:
      12,       // revision
       0,       // classname
       0,    0, // classinfo
      27,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags, initial metatype offsets
       1,    0,  176,    2, 0x08,    1 /* Private */,
       3,    0,  177,    2, 0x08,    2 /* Private */,
       4,    0,  178,    2, 0x08,    3 /* Private */,
       5,    0,  179,    2, 0x08,    4 /* Private */,
       6,    0,  180,    2, 0x08,    5 /* Private */,
       7,    0,  181,    2, 0x08,    6 /* Private */,
       8,    0,  182,    2, 0x08,    7 /* Private */,
       9,    0,  183,    2, 0x08,    8 /* Private */,
      10,    0,  184,    2, 0x08,    9 /* Private */,
      11,    0,  185,    2, 0x08,   10 /* Private */,
      12,    0,  186,    2, 0x08,   11 /* Private */,
      13,    0,  187,    2, 0x08,   12 /* Private */,
      14,    0,  188,    2, 0x08,   13 /* Private */,
      15,    0,  189,    2, 0x08,   14 /* Private */,
      16,    0,  190,    2, 0x08,   15 /* Private */,
      17,    0,  191,    2, 0x08,   16 /* Private */,
      18,    0,  192,    2, 0x08,   17 /* Private */,
      19,    0,  193,    2, 0x08,   18 /* Private */,
      20,    0,  194,    2, 0x08,   19 /* Private */,
      21,    0,  195,    2, 0x08,   20 /* Private */,
      22,    0,  196,    2, 0x08,   21 /* Private */,
      23,    0,  197,    2, 0x08,   22 /* Private */,
      24,    0,  198,    2, 0x08,   23 /* Private */,
      25,    0,  199,    2, 0x08,   24 /* Private */,
      26,    0,  200,    2, 0x08,   25 /* Private */,
      27,    0,  201,    2, 0x08,   26 /* Private */,
      28,    0,  202,    2, 0x08,   27 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

Q_CONSTINIT const QMetaObject everything::staticMetaObject = { {
    QMetaObject::SuperData::link<QObject::staticMetaObject>(),
    qt_meta_stringdata_CLASSeverythingENDCLASS.offsetsAndSizes,
    qt_meta_data_CLASSeverythingENDCLASS,
    qt_static_metacall,
    nullptr,
    qt_incomplete_metaTypeArray<qt_meta_stringdata_CLASSeverythingENDCLASS_t,
        // Q_OBJECT / Q_GADGET
        QtPrivate::TypeAndForceComplete<everything, std::true_type>,
        // method 'initTestCase'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'cleanupTestCase'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'test_case1'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testIsHuman'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testGetPlayerNumber'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testBoardInitialization'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testBoardClicking'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testSetAllowed'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testGameChangeNextPlayer1'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testGameChangeNextPlayer2'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testGameChangePlayers'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testGameRestart'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testGameNextRound'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testGameLogicGenerateValidMoves'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testGameLogicNumOfValidMoves'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testGameLogicValidMove'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testGameLogicGameOver'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testGameLogicGameWon'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testGameStateMakeMove'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testGameStateChangePlayer'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testGameStateInitiate'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testGameStatePrintBoard'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testHumanPlayerIsHuman'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testHumanPlayerGetPlayerNumber'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testLoginFunctionality'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testStartupFunctionality'
        QtPrivate::TypeAndForceComplete<void, std::false_type>,
        // method 'testWidgetFunctionality'
        QtPrivate::TypeAndForceComplete<void, std::false_type>
    >,
    nullptr
} };

void everything::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        auto *_t = static_cast<everything *>(_o);
        (void)_t;
        switch (_id) {
        case 0: _t->initTestCase(); break;
        case 1: _t->cleanupTestCase(); break;
        case 2: _t->test_case1(); break;
        case 3: _t->testIsHuman(); break;
        case 4: _t->testGetPlayerNumber(); break;
        case 5: _t->testBoardInitialization(); break;
        case 6: _t->testBoardClicking(); break;
        case 7: _t->testSetAllowed(); break;
        case 8: _t->testGameChangeNextPlayer1(); break;
        case 9: _t->testGameChangeNextPlayer2(); break;
        case 10: _t->testGameChangePlayers(); break;
        case 11: _t->testGameRestart(); break;
        case 12: _t->testGameNextRound(); break;
        case 13: _t->testGameLogicGenerateValidMoves(); break;
        case 14: _t->testGameLogicNumOfValidMoves(); break;
        case 15: _t->testGameLogicValidMove(); break;
        case 16: _t->testGameLogicGameOver(); break;
        case 17: _t->testGameLogicGameWon(); break;
        case 18: _t->testGameStateMakeMove(); break;
        case 19: _t->testGameStateChangePlayer(); break;
        case 20: _t->testGameStateInitiate(); break;
        case 21: _t->testGameStatePrintBoard(); break;
        case 22: _t->testHumanPlayerIsHuman(); break;
        case 23: _t->testHumanPlayerGetPlayerNumber(); break;
        case 24: _t->testLoginFunctionality(); break;
        case 25: _t->testStartupFunctionality(); break;
        case 26: _t->testWidgetFunctionality(); break;
        default: ;
        }
    }
    (void)_a;
}

const QMetaObject *everything::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *everything::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_CLASSeverythingENDCLASS.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int everything::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 27)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 27;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 27)
            *reinterpret_cast<QMetaType *>(_a[0]) = QMetaType();
        _id -= 27;
    }
    return _id;
}
QT_WARNING_POP
